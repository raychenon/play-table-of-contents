package readme

import models.{LineIndex, TOCResult}
import util.TextUtil

object TableOfContentHelper {

  val PREFIX = "#"
  val PREFIX_C = '#'
  val SPACE: String = "  "
  val BRACKET_COMMENT = "```"

  lazy val COMMENT = s"<!-- Table of contents generated generated by ${Constants.originalUrl} -->"
  lazy val TOCTILE = s"**[Table of Contents](${Constants.originalUrl})**"

  def convert(readme: String): TOCResult = {

    def concatenateTOC(text: Seq[String]) = {
      (TOCTILE +: COMMENT +: text).mkString("\n")
    }

    val lines: Seq[LineIndex] = tableOfContent(readme)
    if (lines.isEmpty) {
      TOCResult(List.empty,"The text has no meta title")
    }else {
      val table = generateTableOfContent(lines)
      TOCResult(table,concatenateTOC(table))
    }
  }

  private def tableOfContent(readme: String): Seq[LineIndex] = {

    def filterInternalSeqFromDelimiter(s: Array[String], delimiter: String): Array[String] = {
      val start = s.indexWhere(_.startsWith(delimiter))
      val stop  = s.indexWhere(_.startsWith(delimiter), start + 1)
      if (stop < 0) s
      else filterInternalSeqFromDelimiter(s.patch(start, Seq(), stop-start+1), delimiter)
    }

    val lines = readme.split("\n")
    // filter out anything in code annotation ```
    val linesWoCode = filterInternalSeqFromDelimiter(lines,"```")
    val topics = linesWoCode.map(_.stripMargin).filter(x => x.startsWith(PREFIX))

    for (line <- topics) yield (getLindex(line))
  }

  private def getLindex(line: String): LineIndex = {
    val count = countConsecutiveChar(line,PREFIX_C)
    val text = line.substring(count, line.length).trim
    val title = s"- [$text](#${TextUtil.slugify(text)})"
    LineIndex(count, title)
  }

  
  def countConsecutiveChar(phrase: String, char: Char): Int = {
    var count: Int = 0
    var i: Int = phrase.indexOf(char.toString)
    while(phrase.charAt(i) == char){
      count = count + 1
      i = i + 1
    }
    count
  }


  // non-breakable space
  private def generateTableOfContent(list: Seq[LineIndex]): Seq[String] = {
    val min = list.reduceLeft(minIndentation).indentation
    for (line <- list) yield (
      s"""${repeatChar(SPACE, line.indentation - min)}${line.title}""")
  }

  private def repeatChar(char: String, n: Int): String = (for (i <- 1 to n) yield char).mkString

  private def minIndentation(l1: LineIndex, l2: LineIndex): LineIndex = if(l1.indentation < l2.indentation) l1 else l2

}
